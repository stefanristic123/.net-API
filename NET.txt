.NET 
 
- web api

dotnet --info
dotnet -h

Kreireanje projekta

dotnet new sln
dotnet new webapi -o API
- dodavanje sln-a u projekat 
dotnet sln add API

Za dodavanje asseta 
cmd + shift + p 
assets

Za https
dotnet dev-certs https --trust

- Za generisanje .vscode - lunch.json => genrate assets for build and debug

lunchsetting.json - fajl za podesavanja koji nam govori kako ce se projekat pokretati
appsettings -  fajl za podesavanja koji nam govori kako ce se projekat pokretati dok vec ranuje

Za instalaciju Nugeta ici u ekstenzije i skinuti nuGet Gallery3

Entity Framework Core - ORM - object realtion mapper
prebacuje nas kod u SQL komande koje updajtuje nase tabele u bazi

SQL Lite
- takodje moramo instalirati i Microsoft.EntityFrameworkCore.SQLite
- takodje moramo instalirati i EntityFrameworkCore

nema database servera, sql koristi fajl kako bi storovao nasu bazu i nije za produkciju 
ovo dodajemo u appsettings.Dev -   "ConnectionStrings": {"DefaultConnection": "Data source=datingapp.db"}
- za kreiranje DB instaliramo EF -  dotnet tool install --global dotnet-ef --version 7.0.0
- komanda za provjeravnaje verzije - dotnet ef --version
- takodje moramo instalirati i Microsoft.EntityFrameworkCore.Design

- komanda za migraciju - dotnet ef migrations add InitialCreate -o Data/Migrations
- komanda za update baze - dotnet ef database update

- API
za vracanje liste koristimo IEnumerable ili List ali lista nam daje vise slozeniji stvari i funkcija

- CORS
program.cs 
builder.Services.AddCors();
app.UseCors(builder => builder.AllowAnyHeader().AllowAnyMethod().WithOrigins("https://localhost:4200"));

- JSON Web Token 
Header - algoritam and token type
Payload - data
Signature 


- Interface 
kao neki ugovor izmedju klase i samog sebe, bilo koja klasa da koristi interface koristi njegove propertije metode itd.
kada pravimo JWT moramo dodati 2 nugat pakete
- System.IdentityModel.Tokens.Jwt
- Microsoft.AspNetCore.Authentication.JwtBearer

u program.cs dodajemo
app.UseAuthentication();

takodje dodajemo dvije ekstenzije 
ApplicationServiceExtension
IdentityServiceExtension

- Repository Pattern - nivo apstrakcije kako kontroler ne bi isao direktno u DbContext uvodimo Respository gdje pokrece funkcije
zasto je bolje :
1. Enkapsulacija logike
2. Duplikacija koda  
3. Promovise testiranje
4. Omogucava nam da lakse promjenimo ORM
zasto je gore:
1. Abstrakcija abstrakcije
2. Svaki entity mora imati svoj respository znaci vise koda
3. Moramo implementirati UnitOfWork pattern

pravimo: IUSerRepository => UserRepository => dodajemo IUserRepository u UsersController

- AutoMapper - pomazen nam da mapiramo sa jednog objekta na drugi 
dodajemo
- AutoMapper.Extensions.Microsoft.DependencyInjection

Adding new segment 

1. Adding Entity
2. Data Context - dotnet ef migrations add ...
3. I...Repository - definisemo metode
4. Kreiramo DTO
5. Kreiramo ...Repository
6. Dodajemo u servise u progam.cs ili ApplicationServiceExtension
7. Dodajmo kontroler 

Identity

dodajemo klasu na AppUser 
dodajemo AppRole i dodajmo AppUserRole zbog relatioshipa many to many
dodajemo IdentityDbContext umjesto DbContext- a
dodajemo Microsoft.AspNetCore.Identity.EntityFrameworkCore

Signal R - GIVES Real time web funcionality to apps
    - Daahboard and monitoring apps
    - Collaborative apps    
    - Notifikacije
    - Chat

Podrzava
    - WebSockets
    - Server Sent events
    - Long polling

BehaviorSubject - varijanta subskrajba koja zahtjeva inicijalnu vrijednost i emituje trenutnu vrijednost kad god je subskrajbovano na nju

Unite of Work - is a design pattern that helps you manage a set of related database operations within a single transaction. 
It ensures that all these operations are either committed together (if successful) or rolled back together (if any operation fails).
It helps you group multiple database operations (e.g., insert, update, delete) into a single logical transaction, so if any part of the 
transaction fails, none of the changes are persisted to the database.
